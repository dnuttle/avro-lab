/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package net.nuttle.avro.bo;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class OldTestRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OldTestRecord\",\"namespace\":\"net.nuttle.avro.bo\",\"fields\":[{\"name\":\"idold\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int idold;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public OldTestRecord() {}

  /**
   * All-args constructor.
   */
  public OldTestRecord(java.lang.Integer idold) {
    this.idold = idold;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return idold;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: idold = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'idold' field.
   */
  public java.lang.Integer getIdold() {
    return idold;
  }

  /**
   * Sets the value of the 'idold' field.
   * @param value the value to set.
   */
  public void setIdold(java.lang.Integer value) {
    this.idold = value;
  }

  /** Creates a new OldTestRecord RecordBuilder */
  public static net.nuttle.avro.bo.OldTestRecord.Builder newBuilder() {
    return new net.nuttle.avro.bo.OldTestRecord.Builder();
  }
  
  /** Creates a new OldTestRecord RecordBuilder by copying an existing Builder */
  public static net.nuttle.avro.bo.OldTestRecord.Builder newBuilder(net.nuttle.avro.bo.OldTestRecord.Builder other) {
    return new net.nuttle.avro.bo.OldTestRecord.Builder(other);
  }
  
  /** Creates a new OldTestRecord RecordBuilder by copying an existing OldTestRecord instance */
  public static net.nuttle.avro.bo.OldTestRecord.Builder newBuilder(net.nuttle.avro.bo.OldTestRecord other) {
    return new net.nuttle.avro.bo.OldTestRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for OldTestRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OldTestRecord>
    implements org.apache.avro.data.RecordBuilder<OldTestRecord> {

    private int idold;

    /** Creates a new Builder */
    private Builder() {
      super(net.nuttle.avro.bo.OldTestRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(net.nuttle.avro.bo.OldTestRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.idold)) {
        this.idold = data().deepCopy(fields()[0].schema(), other.idold);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing OldTestRecord instance */
    private Builder(net.nuttle.avro.bo.OldTestRecord other) {
            super(net.nuttle.avro.bo.OldTestRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.idold)) {
        this.idold = data().deepCopy(fields()[0].schema(), other.idold);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'idold' field */
    public java.lang.Integer getIdold() {
      return idold;
    }
    
    /** Sets the value of the 'idold' field */
    public net.nuttle.avro.bo.OldTestRecord.Builder setIdold(int value) {
      validate(fields()[0], value);
      this.idold = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'idold' field has been set */
    public boolean hasIdold() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'idold' field */
    public net.nuttle.avro.bo.OldTestRecord.Builder clearIdold() {
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public OldTestRecord build() {
      try {
        OldTestRecord record = new OldTestRecord();
        record.idold = fieldSetFlags()[0] ? this.idold : (java.lang.Integer) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
