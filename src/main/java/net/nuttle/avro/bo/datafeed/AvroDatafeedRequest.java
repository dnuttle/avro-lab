/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package net.nuttle.avro.bo.datafeed;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroDatafeedRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroDatafeedRequest\",\"namespace\":\"net.nuttle.avro.bo.datafeed\",\"fields\":[{\"name\":\"clientid\",\"type\":\"int\"},{\"name\":\"datafeedschema\",\"type\":{\"type\":\"record\",\"name\":\"AvroDatafeedSchema\",\"fields\":[{\"name\":\"fields\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AvroDatafeedSchemaField\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"dataType\",\"type\":\"string\"}]}}}]}},{\"name\":\"lines\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AvroDatafeedLine\",\"fields\":[{\"name\":\"fields\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int clientid;
  @Deprecated public net.nuttle.avro.bo.datafeed.AvroDatafeedSchema datafeedschema;
  @Deprecated public java.util.List<net.nuttle.avro.bo.datafeed.AvroDatafeedLine> lines;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public AvroDatafeedRequest() {}

  /**
   * All-args constructor.
   */
  public AvroDatafeedRequest(java.lang.Integer clientid, net.nuttle.avro.bo.datafeed.AvroDatafeedSchema datafeedschema, java.util.List<net.nuttle.avro.bo.datafeed.AvroDatafeedLine> lines) {
    this.clientid = clientid;
    this.datafeedschema = datafeedschema;
    this.lines = lines;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return clientid;
    case 1: return datafeedschema;
    case 2: return lines;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: clientid = (java.lang.Integer)value$; break;
    case 1: datafeedschema = (net.nuttle.avro.bo.datafeed.AvroDatafeedSchema)value$; break;
    case 2: lines = (java.util.List<net.nuttle.avro.bo.datafeed.AvroDatafeedLine>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'clientid' field.
   */
  public java.lang.Integer getClientid() {
    return clientid;
  }

  /**
   * Sets the value of the 'clientid' field.
   * @param value the value to set.
   */
  public void setClientid(java.lang.Integer value) {
    this.clientid = value;
  }

  /**
   * Gets the value of the 'datafeedschema' field.
   */
  public net.nuttle.avro.bo.datafeed.AvroDatafeedSchema getDatafeedschema() {
    return datafeedschema;
  }

  /**
   * Sets the value of the 'datafeedschema' field.
   * @param value the value to set.
   */
  public void setDatafeedschema(net.nuttle.avro.bo.datafeed.AvroDatafeedSchema value) {
    this.datafeedschema = value;
  }

  /**
   * Gets the value of the 'lines' field.
   */
  public java.util.List<net.nuttle.avro.bo.datafeed.AvroDatafeedLine> getLines() {
    return lines;
  }

  /**
   * Sets the value of the 'lines' field.
   * @param value the value to set.
   */
  public void setLines(java.util.List<net.nuttle.avro.bo.datafeed.AvroDatafeedLine> value) {
    this.lines = value;
  }

  /** Creates a new AvroDatafeedRequest RecordBuilder */
  public static net.nuttle.avro.bo.datafeed.AvroDatafeedRequest.Builder newBuilder() {
    return new net.nuttle.avro.bo.datafeed.AvroDatafeedRequest.Builder();
  }
  
  /** Creates a new AvroDatafeedRequest RecordBuilder by copying an existing Builder */
  public static net.nuttle.avro.bo.datafeed.AvroDatafeedRequest.Builder newBuilder(net.nuttle.avro.bo.datafeed.AvroDatafeedRequest.Builder other) {
    return new net.nuttle.avro.bo.datafeed.AvroDatafeedRequest.Builder(other);
  }
  
  /** Creates a new AvroDatafeedRequest RecordBuilder by copying an existing AvroDatafeedRequest instance */
  public static net.nuttle.avro.bo.datafeed.AvroDatafeedRequest.Builder newBuilder(net.nuttle.avro.bo.datafeed.AvroDatafeedRequest other) {
    return new net.nuttle.avro.bo.datafeed.AvroDatafeedRequest.Builder(other);
  }
  
  /**
   * RecordBuilder for AvroDatafeedRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroDatafeedRequest>
    implements org.apache.avro.data.RecordBuilder<AvroDatafeedRequest> {

    private int clientid;
    private net.nuttle.avro.bo.datafeed.AvroDatafeedSchema datafeedschema;
    private java.util.List<net.nuttle.avro.bo.datafeed.AvroDatafeedLine> lines;

    /** Creates a new Builder */
    private Builder() {
      super(net.nuttle.avro.bo.datafeed.AvroDatafeedRequest.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(net.nuttle.avro.bo.datafeed.AvroDatafeedRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.clientid)) {
        this.clientid = data().deepCopy(fields()[0].schema(), other.clientid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.datafeedschema)) {
        this.datafeedschema = data().deepCopy(fields()[1].schema(), other.datafeedschema);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lines)) {
        this.lines = data().deepCopy(fields()[2].schema(), other.lines);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AvroDatafeedRequest instance */
    private Builder(net.nuttle.avro.bo.datafeed.AvroDatafeedRequest other) {
            super(net.nuttle.avro.bo.datafeed.AvroDatafeedRequest.SCHEMA$);
      if (isValidValue(fields()[0], other.clientid)) {
        this.clientid = data().deepCopy(fields()[0].schema(), other.clientid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.datafeedschema)) {
        this.datafeedschema = data().deepCopy(fields()[1].schema(), other.datafeedschema);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lines)) {
        this.lines = data().deepCopy(fields()[2].schema(), other.lines);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'clientid' field */
    public java.lang.Integer getClientid() {
      return clientid;
    }
    
    /** Sets the value of the 'clientid' field */
    public net.nuttle.avro.bo.datafeed.AvroDatafeedRequest.Builder setClientid(int value) {
      validate(fields()[0], value);
      this.clientid = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'clientid' field has been set */
    public boolean hasClientid() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'clientid' field */
    public net.nuttle.avro.bo.datafeed.AvroDatafeedRequest.Builder clearClientid() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'datafeedschema' field */
    public net.nuttle.avro.bo.datafeed.AvroDatafeedSchema getDatafeedschema() {
      return datafeedschema;
    }
    
    /** Sets the value of the 'datafeedschema' field */
    public net.nuttle.avro.bo.datafeed.AvroDatafeedRequest.Builder setDatafeedschema(net.nuttle.avro.bo.datafeed.AvroDatafeedSchema value) {
      validate(fields()[1], value);
      this.datafeedschema = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'datafeedschema' field has been set */
    public boolean hasDatafeedschema() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'datafeedschema' field */
    public net.nuttle.avro.bo.datafeed.AvroDatafeedRequest.Builder clearDatafeedschema() {
      datafeedschema = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'lines' field */
    public java.util.List<net.nuttle.avro.bo.datafeed.AvroDatafeedLine> getLines() {
      return lines;
    }
    
    /** Sets the value of the 'lines' field */
    public net.nuttle.avro.bo.datafeed.AvroDatafeedRequest.Builder setLines(java.util.List<net.nuttle.avro.bo.datafeed.AvroDatafeedLine> value) {
      validate(fields()[2], value);
      this.lines = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'lines' field has been set */
    public boolean hasLines() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'lines' field */
    public net.nuttle.avro.bo.datafeed.AvroDatafeedRequest.Builder clearLines() {
      lines = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public AvroDatafeedRequest build() {
      try {
        AvroDatafeedRequest record = new AvroDatafeedRequest();
        record.clientid = fieldSetFlags()[0] ? this.clientid : (java.lang.Integer) defaultValue(fields()[0]);
        record.datafeedschema = fieldSetFlags()[1] ? this.datafeedschema : (net.nuttle.avro.bo.datafeed.AvroDatafeedSchema) defaultValue(fields()[1]);
        record.lines = fieldSetFlags()[2] ? this.lines : (java.util.List<net.nuttle.avro.bo.datafeed.AvroDatafeedLine>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
