/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package net.nuttle.avro.bo.datafeed;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroDatafeedLine extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroDatafeedLine\",\"namespace\":\"net.nuttle.avro.bo.datafeed\",\"fields\":[{\"name\":\"fields\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<java.lang.CharSequence> fields;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public AvroDatafeedLine() {}

  /**
   * All-args constructor.
   */
  public AvroDatafeedLine(java.util.List<java.lang.CharSequence> fields) {
    this.fields = fields;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fields;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fields = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'fields' field.
   */
  public java.util.List<java.lang.CharSequence> getFields() {
    return fields;
  }

  /**
   * Sets the value of the 'fields' field.
   * @param value the value to set.
   */
  public void setFields(java.util.List<java.lang.CharSequence> value) {
    this.fields = value;
  }

  /** Creates a new AvroDatafeedLine RecordBuilder */
  public static net.nuttle.avro.bo.datafeed.AvroDatafeedLine.Builder newBuilder() {
    return new net.nuttle.avro.bo.datafeed.AvroDatafeedLine.Builder();
  }
  
  /** Creates a new AvroDatafeedLine RecordBuilder by copying an existing Builder */
  public static net.nuttle.avro.bo.datafeed.AvroDatafeedLine.Builder newBuilder(net.nuttle.avro.bo.datafeed.AvroDatafeedLine.Builder other) {
    return new net.nuttle.avro.bo.datafeed.AvroDatafeedLine.Builder(other);
  }
  
  /** Creates a new AvroDatafeedLine RecordBuilder by copying an existing AvroDatafeedLine instance */
  public static net.nuttle.avro.bo.datafeed.AvroDatafeedLine.Builder newBuilder(net.nuttle.avro.bo.datafeed.AvroDatafeedLine other) {
    return new net.nuttle.avro.bo.datafeed.AvroDatafeedLine.Builder(other);
  }
  
  /**
   * RecordBuilder for AvroDatafeedLine instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroDatafeedLine>
    implements org.apache.avro.data.RecordBuilder<AvroDatafeedLine> {

    private java.util.List<java.lang.CharSequence> fields;

    /** Creates a new Builder */
    private Builder() {
      super(net.nuttle.avro.bo.datafeed.AvroDatafeedLine.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(net.nuttle.avro.bo.datafeed.AvroDatafeedLine.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fields)) {
        this.fields = data().deepCopy(fields()[0].schema(), other.fields);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AvroDatafeedLine instance */
    private Builder(net.nuttle.avro.bo.datafeed.AvroDatafeedLine other) {
            super(net.nuttle.avro.bo.datafeed.AvroDatafeedLine.SCHEMA$);
      if (isValidValue(fields()[0], other.fields)) {
        this.fields = data().deepCopy(fields()[0].schema(), other.fields);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'fields' field */
    public java.util.List<java.lang.CharSequence> getFields() {
      return fields;
    }
    
    /** Sets the value of the 'fields' field */
    public net.nuttle.avro.bo.datafeed.AvroDatafeedLine.Builder setFields(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.fields = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'fields' field has been set */
    public boolean hasFields() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'fields' field */
    public net.nuttle.avro.bo.datafeed.AvroDatafeedLine.Builder clearFields() {
      fields = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public AvroDatafeedLine build() {
      try {
        AvroDatafeedLine record = new AvroDatafeedLine();
        record.fields = fieldSetFlags()[0] ? this.fields : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
